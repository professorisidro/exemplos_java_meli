<?xml version="1.0" encoding="UTF-8"?><testrun name="java" project="mockdemo" tests="18" started="18" failures="0" errors="0" ignored="0">
  <testsuite name="br.com.meli.mockdemo.ProdutoServiceTest" time="2.454" displayname="ProdutoServiceTest" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]">
    <testcase name="shouldNotPostProductAndReturnStatusBadRequestDueToNullName" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="2.149" displayname="shouldNotPostProductAndReturnStatusBadRequestDueToNullName()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:shouldNotPostProductAndReturnStatusBadRequestDueToNullName()]"/>
    <testcase name="shouldNotPostProductAndReturnStatusBadRequestDueToZeroPrice" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.026" displayname="shouldNotPostProductAndReturnStatusBadRequestDueToZeroPrice()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:shouldNotPostProductAndReturnStatusBadRequestDueToZeroPrice()]"/>
    <testcase name="testandoSeProduto1Existe" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.019" displayname="testandoSeProduto1Existe()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:testandoSeProduto1Existe()]"/>
    <testcase name="shouldGetProdutoAndReturnStatusOk" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.028" displayname="shouldGetProdutoAndReturnStatusOk()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:shouldGetProdutoAndReturnStatusOk()]"/>
    <testcase name="shouldNotAdicionarProdutoAndNotifyNegativePrice" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.015" displayname="shouldNotAdicionarProdutoAndNotifyNegativePrice()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:shouldNotAdicionarProdutoAndNotifyNegativePrice()]"/>
    <testcase name="shouldNotPostProductAndReturnStatusBadRequestDueToNoData" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.01" displayname="shouldNotPostProductAndReturnStatusBadRequestDueToNoData()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:shouldNotPostProductAndReturnStatusBadRequestDueToNoData()]"/>
    <testcase name="sholdNotGetProdutoAndReturnStatusNotFound" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.013" displayname="sholdNotGetProdutoAndReturnStatusNotFound()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:sholdNotGetProdutoAndReturnStatusNotFound()]"/>
    <testcase name="shouldNotAdicionarProdutoAndNotifyZeroPrice" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.004" displayname="shouldNotAdicionarProdutoAndNotifyZeroPrice()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:shouldNotAdicionarProdutoAndNotifyZeroPrice()]"/>
    <testcase name="shouldNotAdicionarProdutoAndNotifyNullDescription" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.009" displayname="shouldNotAdicionarProdutoAndNotifyNullDescription()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:shouldNotAdicionarProdutoAndNotifyNullDescription()]"/>
    <testcase name="testandoSeProduto2Existe" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.013" displayname="testandoSeProduto2Existe()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:testandoSeProduto2Existe()]"/>
    <testcase name="testandoSeProduto100Inexiste" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.006" displayname="testandoSeProduto100Inexiste()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:testandoSeProduto100Inexiste()]"/>
    <testcase name="shouldPostProductAndReturnStatusCreated" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.014" displayname="shouldPostProductAndReturnStatusCreated()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:shouldPostProductAndReturnStatusCreated()]"/>
    <testcase name="testandoIdInvalido" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.015" displayname="testandoIdInvalido()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:testandoIdInvalido()]"/>
    <testcase name="shouldAdicionarProdutoAndExpectOk" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.019" displayname="shouldAdicionarProdutoAndExpectOk()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:shouldAdicionarProdutoAndExpectOk()]"/>
    <testcase name="shouldNotAdicionarProdutoAndNotifyNoData" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.02" displayname="shouldNotAdicionarProdutoAndNotifyNoData()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:shouldNotAdicionarProdutoAndNotifyNoData()]"/>
    <testcase name="shouldNotPostProductAndReturnStatusBadRequestDueToNegativePrice" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.008" displayname="shouldNotPostProductAndReturnStatusBadRequestDueToNegativePrice()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:shouldNotPostProductAndReturnStatusBadRequestDueToNegativePrice()]"/>
    <testcase name="shouldNotGetProdutoAndReturnStatusBadRequest" classname="br.com.meli.mockdemo.ProdutoServiceTest" time="0.006" displayname="shouldNotGetProdutoAndReturnStatusBadRequest()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.ProdutoServiceTest]/[method:shouldNotGetProdutoAndReturnStatusBadRequest()]"/>
  </testsuite>
  <testsuite name="br.com.meli.mockdemo.MockdemoApplicationTests" time="0.003" displayname="MockdemoApplicationTests" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.MockdemoApplicationTests]">
    <testcase name="contextLoads" classname="br.com.meli.mockdemo.MockdemoApplicationTests" time="0.003" displayname="contextLoads()" uniqueid="[engine:junit-jupiter]/[class:br.com.meli.mockdemo.MockdemoApplicationTests]/[method:contextLoads()]"/>
  </testsuite>
</testrun>
